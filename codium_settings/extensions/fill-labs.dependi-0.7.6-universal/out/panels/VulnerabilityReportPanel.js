"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VulnerabilityReportPanel = void 0;
const vscode = __importStar(require("vscode"));
const reports_1 = require("../api/index/dependi-index-server/reports");
const utils_1 = require("../commands/report-generator/utils");
const MainPanel_1 = require("./MainPanel");
class VulnerabilityReportPanel extends MainPanel_1.WebviewPanel {
    constructor(panel, extensionUri, fetchedHTML) {
        super(panel, extensionUri);
        this.fetchedHTML = fetchedHTML;
        this._panel.webview.html = this.getWebviewContent(fetchedHTML);
        this._setWebviewMessageListener(this._panel.webview);
    }
    static render(extensionUri, fetchedHTML) {
        const panel = vscode.window.createWebviewPanel("vulnerabilityReport", "Vulnerability Report", { viewColumn: vscode.ViewColumn.One, preserveFocus: true }, {
            enableScripts: true,
            retainContextWhenHidden: true,
        });
        return new VulnerabilityReportPanel(panel, extensionUri, fetchedHTML);
    }
    _getVulnerabilityReportHtml(fetchedHTML) {
        return fetchedHTML;
    }
    getWebviewContent(fetchedHTML) {
        return this._getVulnerabilityReportHtml(fetchedHTML);
    }
    async handleExportReport() {
        const defaultFileName = this.getSaveText();
        const options = {
            saveLabel: "Save PDF",
            filters: { "PDF Files": ["pdf"] },
            defaultUri: vscode.Uri.file(defaultFileName),
        };
        const uri = await vscode.window.showSaveDialog(options);
        if (uri) {
            let html = this._getVulnerabilityReportHtml(this.fetchedHTML);
            html = this.addHideClassToExportButton(html);
            const htmlPDF = await (0, reports_1.getReportPDF)(html);
            if (!htmlPDF || !htmlPDF.body || htmlPDF.body.size === 0) {
                vscode.window.showErrorMessage("Error exporting PDF.");
                return;
            }
            const htmlBuffer = await this.blobToUint8Array(htmlPDF.body);
            const uriPath = uri.path;
            const fixedUriPath = (0, utils_1.winHelper)(uriPath);
            const fixedUri = vscode.Uri.file(fixedUriPath);
            await vscode.workspace.fs.writeFile(fixedUri, htmlBuffer);
            vscode.window
                .showInformationMessage(`Report saved to ${uri.fsPath}`, "Open File")
                .then(async (selection) => {
                if (selection === "Open File") {
                    const fileUri = vscode.Uri.file(uri.fsPath);
                    await vscode.env.openExternal(fileUri);
                }
            });
        }
    }
    _setWebviewMessageListener(webview) {
        webview.onDidReceiveMessage(async (message) => {
            if (message.command === "exportReport") {
                try {
                    await this.handleExportReport();
                }
                catch (error) {
                    console.error("Failed to save PDF: ", error);
                    vscode.window.showErrorMessage("Error exporting PDF.");
                }
            }
        }, undefined, this._disposables);
    }
    getSaveText() {
        const now = new Date();
        const hours = now.getHours();
        const minutes = now.getMinutes();
        const formattedHours = hours < 10 ? "0" + hours : hours;
        const formattedMinutes = minutes < 10 ? "0" + minutes : minutes;
        const currentDate = now.toISOString().split("T")[0];
        return `Vulnerability_Report-${currentDate}-${formattedHours}_${formattedMinutes}.pdf`;
    }
    addHideClassToExportButton(html) {
        return html.replace('<button id="pdf-export-button">', '<button id="pdf-export-button" class="hide-in-pdf">');
    }
    async blobToUint8Array(blob) {
        const arrayBuffer = await blob.arrayBuffer();
        return new Uint8Array(arrayBuffer);
    }
}
exports.VulnerabilityReportPanel = VulnerabilityReportPanel;
//# sourceMappingURL=VulnerabilityReportPanel.js.map