"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryMultiplePackageVulns = void 0;
exports.fetchDataFromOSV = fetchDataFromOSV;
exports.fetchSingleQueryFromOSV = fetchSingleQueryFromOSV;
exports.fetchMultipleQueriesVulnCount = fetchMultipleQueriesVulnCount;
const node_cache_1 = __importDefault(require("node-cache"));
const https = __importStar(require("https"));
const status_bar_1 = require("../../ui/status-bar");
const config_1 = require("../../config");
const cache = new node_cache_1.default({ stdTTL: 60 * 10 });
function fetchDataFromOSV(request) {
    const options = {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
    };
    return new Promise((resolve, reject) => {
        const req = https.request(config_1.Settings.vulnerability.osvBatch, options, (res) => {
            let data = "";
            res.on("data", (chunk) => {
                data += chunk;
            });
            res.on("end", () => {
                try {
                    const responseData = JSON.parse(data);
                    for (let i = 0; i < responseData.results?.length; i++) {
                        responseData.results[i].packageName = request.queries[i].package.name;
                        responseData.results[i].version = request.queries[i].version;
                        if (responseData.results[i].vulns) {
                            responseData.results[i].vulns = responseData.results[i].vulns.filter((vuln) => {
                                if (!config_1.Settings.vulnerability.ghsa) {
                                    return !vuln.id.startsWith("GHSA");
                                }
                                else {
                                    return true;
                                }
                            });
                        }
                    }
                    resolve(responseData);
                }
                catch (error) {
                    reject(error);
                }
            });
        });
        req.on("error", (error) => {
            reject(error);
        });
        req.write(JSON.stringify(request));
        req.end();
    });
}
const queryOSVAPI = async (request) => {
    try {
        const cacheKey = JSON.stringify({ request, ghsaCheck: config_1.Settings.vulnerability.ghsa });
        if (cache.has(cacheKey)) {
            const cachedResponse = cache.get(cacheKey);
            if (cachedResponse === undefined) {
                throw new Error("Cached response is undefined");
            }
            return cachedResponse;
        }
        else {
            const response = await fetchDataFromOSV(request);
            cache.set(cacheKey, response);
            return response;
        }
    }
    catch (error) {
        console.error("Error fetching data from OSV API:", error);
        throw error;
    }
};
const queryMultiplePackageVulns = async (dependencies, environment) => {
    try {
        const queryArray = {
            queries: []
        };
        for (let i = 0; i < dependencies.length; i++) {
            const packageName = dependencies[i].item.key;
            const currentVersionIndex = dependencies[i].versions?.findIndex((version) => version === dependencies[i]?.item?.value) ?? (dependencies[i].versions?.length ?? 0) - 1;
            for (let j = 0; j <= currentVersionIndex; j++) {
                if (!dependencies[i].versions || !dependencies[i]?.versions?.[j]) {
                    continue;
                }
                queryArray.queries.push({
                    version: dependencies[i].versions?.[j],
                    package: {
                        name: packageName,
                        ecosystem: environment
                    }
                });
            }
        }
        status_bar_1.StatusBar.setText("Info", "Fetching vulnerabilities from OSV");
        const response = await queryOSVAPI(queryArray);
        const packageWithVulnArray = groupByPackages(response, dependencies);
        status_bar_1.StatusBar.setText("Info", "Vulnerabilities fetched from OSV");
        return packageWithVulnArray;
    }
    catch (error) {
        console.error("Error querying multiple package vulnerabilities:", error);
        return [];
    }
};
exports.queryMultiplePackageVulns = queryMultiplePackageVulns;
function groupByPackages(response, dependencies) {
    const packagesMap = new Map();
    for (let i = 0; i < response.results?.length; i++) {
        const key = response.results[i].packageName;
        if (packagesMap.has(key)) {
            const value = packagesMap.get(key);
            value?.versionVulnerabilities.push({
                version: response.results[i].version,
                vulnerabilities: response.results[i].vulns
            });
            packagesMap.set(key, value);
        }
        else {
            packagesMap.set(key, {
                packageName: key,
                versionVulnerabilities: [{
                        version: response.results[i].version,
                        vulnerabilities: response.results[i].vulns
                    }]
            });
        }
    }
    for (let i = 0; i < dependencies?.length; i++) {
        const vulnerabilities = packagesMap.get(dependencies[i].item.key);
        const vulnsMap = new Map();
        if (vulnerabilities?.versionVulnerabilities) {
            for (let j = 0; j < vulnerabilities?.versionVulnerabilities.length; j++) {
                const vulnerabilityArray = vulnerabilities?.versionVulnerabilities[j];
                const idArray = [];
                if (vulnerabilityArray?.vulnerabilities) {
                    vulnerabilityArray?.vulnerabilities.forEach((v) => {
                        idArray.push(v.id);
                    });
                }
                vulnsMap.set(vulnerabilityArray.version, idArray);
            }
        }
        dependencies[i].vulns = vulnsMap;
    }
    return dependencies;
}
function fetchSingleQueryFromOSV(request) {
    const options = {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
    };
    return new Promise((resolve, reject) => {
        const req = https.request(config_1.Settings.vulnerability.osvSingle, options, (res) => {
            let data = "";
            res.on("data", (chunk) => {
                data += chunk;
            });
            res.on("end", () => {
                try {
                    const responseData = JSON.parse(data);
                    if (responseData.vulns) {
                        if (!config_1.Settings.vulnerability.ghsa) {
                            // if response data vulnerability id starts with GHSA, remove the vulnerability
                            responseData.vulns = responseData.vulns.filter((vuln) => !vuln.id.startsWith("GHSA"));
                        }
                    }
                    responseData.packageName = request.package.name;
                    responseData.version = request.version;
                    resolve(responseData);
                }
                catch (error) {
                    reject(error);
                }
            });
        });
        req.on("error", (error) => {
            reject(error);
        });
        req.write(JSON.stringify(request));
        req.end();
    });
}
function fetchMultipleQueriesVulnCount(requests) {
    // Use querybatch endpoint to fetch multiple queries
    const options = {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
    };
    return new Promise((resolve, reject) => {
        const req = https.request(config_1.Settings.vulnerability.osvBatch, options, (res) => {
            let data = "";
            res.on("data", (chunk) => {
                data += chunk;
            });
            res.on("end", () => {
                try {
                    let count = 0;
                    const responseData = JSON.parse(data);
                    responseData.results?.forEach((result) => {
                        if (result.vulns) {
                            result.vulns.forEach((vuln) => {
                                if (!config_1.Settings.vulnerability.ghsa) {
                                    if (!vuln.id.startsWith("GHSA")) {
                                        count++;
                                    }
                                }
                                else {
                                    count++;
                                }
                            });
                        }
                    });
                    resolve(count);
                }
                catch (error) {
                    reject(error);
                }
            });
        });
        req.on("error", (error) => {
            reject(error);
        });
        req.write(JSON.stringify({ queries: requests }));
        req.end();
    });
}
//# sourceMappingURL=vulnerability-service.js.map